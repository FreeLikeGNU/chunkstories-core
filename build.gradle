// Apply the java plugin to add support for Java
apply plugin: 'java'

apply plugin: 'java-library'
apply plugin: 'maven'

repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
	maven {
		url "http://maven.xol.io/repository/public/"
	}
}

description = 'The free base content chunkstories is built on.'
version = '123'

ext {
	apiRevisionBuiltAgainst = '114'
	useEclipseCompiler = true
}

buildscript {
	repositories {
		mavenCentral() // for ecj
		maven { url 'https://jitpack.io' } // for this plugin
	}

	dependencies {
		// Replace master-SNAPSHOT with a specific commit hash to not always get the latest version
		classpath 'com.github.johni0702:gradle-ecj-plugin:master-SNAPSHOT'
	}
}

if(ext.useEclipseCompiler) {
	apply plugin: 'de.johni0702.ecj'
	
	println "Using ECJ compiler"
}

dependencies {
	compile group: 'io.xol.chunkstories', name: 'api', version: apiRevisionBuiltAgainst
}

group = 'io.xol.chunkstories'

/** Goes ahead & makes a content distribution */
task buildContentPack(type: Zip) {
	//Include all resources, but don't bundle any project file from content authoring tools
	//Keeping those in the repo is fine, but users don't need it!
	//If anyone wants them, just grab it from github :)
	from('res/'){
		exclude("**/*.pdn")
		exclude("**/*.ps")
		exclude("**/*.xcf")
		exclude("**/*.aup")
	}
	
	//Include actual code
	from configurations.runtime.allArtifacts.files
	
	archiveName = "core_content.zip"
}

task installContentPack(type: Copy) {
	dependsOn buildContentPack

	include '**/*.zip'

	from 'build/distributions/'
	into rootProject.projectDir;
}

configurations {
	contentPack
	onlyCode
}

artifacts {
	contentPack buildContentPack
	onlyCode jar
}

configurations {
	deployerJars
}

dependencies {
	deployerJars "org.apache.maven.wagon:wagon-ssh:2.12" //<-- fuck this fuck this fuck this
}

//Create a properties.gradle with login credentials to use this.
//Watch out: wagon-ssh is an old mess and WILL NOT TAKE EdDSA host keys
//You MUST ask the server for one of those and replace whatever you had for it in known_hosts
if(hasProperty('uploadUsername')) {
	println 'Login credentials found'
	uploadArchives {
		repositories {
				mavenDeployer {
       				configuration = configurations.deployerJars	
					
					if(project.hasProperty('uploadPrivateKey')) {
						println 'Found private key'
						repository(url: "scp://xol.io/home/maven-user/maven-repo") {				
							authentication(userName: uploadUsername, privateKey: uploadPrivateKey)
		    				}
					}
					else {
						println 'Found password'
						repository(url: "scp://xol.io/home/maven-user/maven-repo") {				
							authentication(userName: uploadUsername, password: uploadPassword)
		    				}
					}
				}
		}
	}
}
